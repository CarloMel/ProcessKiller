/*
This code will close one or more processes through cmd
(forcefully with /F or gently without /F)
and will return the cmd output
*/

package com.ender.app_ender;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class ProcessKiller {

    private List<String> listToKill;

    public ProcessKiller() {

        listToKill = new ArrayList<>();
    }

    public List<String> getListToKill() {
        return listToKill;
    }

    public void setListToKill(List<String> listToKill) {
        this.listToKill = listToKill;
    }

    // Add singular process to List
    public void addProcessToList(String target) {

        getListToKill().add(target);
    }

    public void killList() {

        List<String> kl = getListToKill();

        // if list is empty
        if (kl.isEmpty()) {
            System.out.println("No processes to kill");
            return;
        }

        for (String target : kl) {

            // cmd code to close a task forcefully is taskkill /F /IM Target.exe
            String cmd = "taskkill /IM " + target;
            //BufferedReader reads the output generated by the cmd command
            //useful for debugging or verifying if the command was executed successfully
            BufferedReader reader = null;
            // executes the system command and returns an object
            Process process = null;

            try {

                //executes command
                process = Runtime.getRuntime().exec(cmd);
                //reads output
                reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

                String line;
                // if output is not null, print
                while ((line = reader.readLine()) != null) {
                    System.out.println(line);
                }

                // wait for the process to end
                int exitCode = process.waitFor();
                // 0 means the process is successfully terminated
                if (exitCode == 0) {
                    System.out.println(target + " was successfully terminated");
                } else {
                    System.out.println("Failed to terminate " + target);
                }

            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                // I close the reader if it's not null
                // closing a null reader might crash the code
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }
}